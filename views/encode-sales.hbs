<html>
    <head>
        <title>Encode Sales</title>
        <link rel="stylesheet" type="text/css" href="../stylesheets/base.css">
        <link rel="stylesheet" type="text/css" href="../stylesheets/encode.css">
        <link rel="icon" type="image/x-icon" href="/images/favicon.png">
    </head>
    <body>
        {{!-- Header --}}
        <div class="header-div">
            <img class="logo" src="../images/logo.png">
            <div class="flex center">
                <ul>
                    <li><a class="header-divider"></a></li>
                    <li><a class="header-button" href="/home">Home</a></li>
                    <li><a class="header-divider">></a></li>
                    <li><a class="header-button on-page">Encode Sales</a></li>
                </ul>
            </div>
            <div class="sign-out">
                <div>
                    <span>{{user.name}}</span> <br />
                    <a class="sign-out-button" href="/">Sign Out</a>
                </div>
            </div>
        </div>
        <div class="body-div">
            <div class="flex column table-container">   
                {{!-- <span class="title-card">Encode Sales</span> --}}
                <form id="sale-form" action="/save-sale" method="post">
                    <button id="save-sale-button" onclick="return validateFields()" type="submit" hidden></button>
                    <div class="flex">
                        <div class="si-container">
                            SI <input name="saleId" type="text" placeholder="SI Number" value="{{lastSaleSi}}" /> 
                        </div>
                        <div class="si-container">
                           Discount: <span class="discount-display"> 20%</span>
                           <input name="discount" type="hidden" />
                           <input name="remarks" type="hidden" />
                        </div>
                    </div>
                    
                    <table class="encode-table">
                        <thead>
                            <tr>
                                <th class="quantity">Qty</th>
                                <th class="name">Description</th>
                                <th class="price">Unit Price</th>
                                <th class="discount">Apply Discount</th>
                                <th class="amount">Amount</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{!-- <tr class="data></tr> goes here --}}

                            <tr class="table-footer">
                                <td></td>
                                <td></td>
                                <td></td>
                                <td class="subtitle border-top">Subtotal :</td>
                                <td class="sale-subtotal amount border-top">₱ 0.00</td>
                            </tr>
                            <tr class="table-footer">
                                <td></td>
                                <td></td>
                                <td></td>
                                <td class="subtitle">Discounts :</td>
                                <td class="sale-discount amount">₱ 0.00</td>
                            </tr>
                            <tr class="table-footer">
                                <td></td>
                                <td></td>
                                <td></td>
                                <td class="subtitle border-bottom">VAT (12%) :</td>
                                <td class="sale-tax amount border-bottom">₱ 0.00</td>
                            </tr>
                            <tr class="table-footer">
                                <td></td>
                                <td></td>
                                <td></td>
                                <td class="total subtitle border-bottom bold">Total :</td>
                                <td class="total sale-total amount border-bottom bold">₱ 0.00<input type="hidden" name="sale-total" value="" /></td>
                            </tr>
                        </tbody>
                    </table>
                </form>
            </div>
        </div>
        <div class="item-select flex column center">
            <div class="price-display" tabindex="-1">
                0.00
            </div>
            <div class="select-table-container">
                <table class="select-table">
                    <thead>
                        <tr>
                            <th class="select-description">Description</th>
                            <th class="select-price">Price</th>
                            <th class="select-code">Item Code</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each inventory}}
                        <tr>
                            <td class="select-description">{{itemName}}</td>
                            <td class="select-price">{{price}}</td>
                            <td class="select-code">{{itemId}}</td>
                            <td class="select-qty" hidden>{{quantity}}</td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
        <div id="qty-input" class="overlay-input flex column">
            Enter Quantity
            <input name="qty-input" type="text" />
        </div> 
        <div id="discount-input" class="overlay-input discount-overlay-input flex column">
            Enter Discount
            <input name="discount-input" type="text" placeholder="20" value=""/>
            <input name="remarks-input" type="text" placeholder="Remarks" />
        </div>
        <span class="error-message" id="error-message" hidden>SI Number is empty</span>
    </body>
<script>
    function validateFields() {
        const discountCheckboxes = document.querySelectorAll('.encode-table tbody tr.data .discount input[type="checkbox"]');
        const remarksInputField = document.querySelector('input[name="remarks-input"]');
        const saleIdInput = document.querySelector('input[name="saleId"]');
        const error = document.getElementById("error-message");
        const dataRows = document.querySelectorAll('.encode-table tbody tr.data');

        if (dataRows.length === 0) {
            error.hidden = false;
            error.textContent = "Sale has no items"; 
            error.style.opacity = 1;
            setTimeout(() => {
                error.style.opacity = 0;
            }, 5000);
            return false;
        }

        if (saleIdInput.value.trim() === "") {
            error.hidden = false;
            error.style.opacity = 1;
            setTimeout(() => {
                error.style.opacity = 0; 
            }, 5000);
            saleIdInput.focus();
            return false;
        }

        return true;
    }

    document.addEventListener("DOMContentLoaded", function () {
        const bodyDiv = document.querySelector('.body-div');
        const encodeTableBody = document.querySelector('.encode-table tbody');

        const itemSelect = document.querySelector(".item-select");
        const pluRows = document.querySelectorAll(".select-table tbody tr");
        const priceDisplay = document.querySelector(".price-display");

        const qtyInput = document.getElementById("qty-input");
        const qtyInputField = qtyInput.querySelector('input[name="qty-input"]');
        const discountInput = document.getElementById("discount-input");
        const discountInputField = discountInput.querySelector('input[name="discount-input"]');
        const remarksInputField = discountInput.querySelector('input[name="remarks-input"]');

        const saleIdInput = document.querySelector('input[name="saleId"]');
        const error = document.getElementById("error-message");

        let searchBuffer = "";
        let searchTimeout;
        let lastFocusedRow = null; 

        itemSelect.style.visibility = "hidden";
        qtyInput.style.visibility = "hidden";
        discountInput.style.visibility = "hidden";
        saleIdInput.focus();

        let barcodeBuffer = "";
        let lastKeyTime = Date.now();

        document.addEventListener("keydown", function (event) {
            const currentTime = Date.now();
            const timeDifference = currentTime - lastKeyTime;

            if (timeDifference > 15) {
                barcodeBuffer = "";
            }

            lastKeyTime = currentTime;

            if (event.key.length === 1) { 
                barcodeBuffer += event.key;
            } else if (event.key === "Enter") {
                if (barcodeBuffer.length > 0) { 
                    event.preventDefault(); 
                    const barcode = barcodeBuffer; 
                    handleBarcodeInput(barcode); 
                    barcodeBuffer = "";
                } else {
                    return;
                }
            }
        });

        function handleBarcodeInput(barcode) {
            const matchedRow = Array.from(pluRows).find(row => {
                const codeCell = row.querySelector(".select-code");
                return codeCell && codeCell.textContent.trim() === barcode.trim();
            });

            if (matchedRow) {
                const itemName = matchedRow.querySelector(".select-description").textContent;
                const itemPrice = matchedRow.querySelector(".select-price").textContent;
                const itemId = matchedRow.querySelector(".select-code").textContent;

                const newRow = addItemToEncodeTable(itemName, itemPrice, itemId);
                setTimeout(() => {
                    itemSelect.style.visibility = "hidden";
                    bodyDiv.classList.remove("blur");
                    newRow.focus();
                    lastFocusedRow = newRow;            
                }, 10);
                
            } else {
                setTimeout(() => {
                    itemSelect.style.visibility = "hidden";
                    bodyDiv.classList.remove("blur");
                }, 10);
                
                showError(`Item with barcode ${barcode} not found.`);
            }
        }

        function showError(message) {
            const error = document.getElementById("error-message");
            error.textContent = message;
            error.hidden = false;
            error.style.opacity = 1;
            setTimeout(() => {
                error.style.opacity = 0;
            }, 5000);
        }

        saleIdInput.addEventListener("input", function () {
            saleIdInput.value = saleIdInput.value.replace(/[^0-9]/g, '');
        });

        function getDiscountRate() {
            const discountValue = parseFloat(discountInputField.value) || parseFloat(discountInputField.placeholder);
            return discountValue / 100;
        }

        function updateRowAmount(row) {
            const quantityCell = row.querySelector('.quantity');
            const priceCell = row.querySelector('.price');
            const amountCell = row.querySelector('.amount');
            const discountCheckbox = row.querySelector('.discount input[type="checkbox"]');

            const quantity = parseInt(quantityCell.textContent, 10) || 0;
            const unitPrice = parseFloat(priceCell.textContent) || 0;
            const discountRate = discountCheckbox && discountCheckbox.checked ? getDiscountRate() : 0;
            const amount = quantity * unitPrice * (1 - discountRate);

            const amountTextNode = amountCell.firstChild;
            if (amountTextNode && amountTextNode.nodeType === Node.TEXT_NODE) {
                amountTextNode.textContent = amount.toFixed(2);
            } else {
                amountCell.insertBefore(document.createTextNode(amount.toFixed(2)), amountCell.firstChild);
            }

            let amountInput = amountCell.querySelector('input[type="hidden"]');
            amountInput.value = amount.toFixed(2);
        }

        function updateTotalAmount() {
            const rows = encodeTableBody.querySelectorAll('tr.data');
            let subtotal = 0;
            let discountTotal = 0;
            let vatTotal = 0;
            let total = 0;

            rows.forEach(row => {
                const amountCell = row.querySelector('.amount');
                const amount = parseFloat(amountCell.textContent) || 0;
                subtotal += amount;

                const discountCheckbox = row.querySelector('.discount input[type="checkbox"]');
                if (discountCheckbox && discountCheckbox.checked) {
                    const quantityCell = row.querySelector('.quantity');
                    const priceCell = row.querySelector('.price');
                    const quantity = parseInt(quantityCell.textContent, 10) || 0;
                    const unitPrice = parseFloat(priceCell.textContent) || 0;
                    const discountRate = getDiscountRate();
                    discountTotal += quantity * unitPrice * discountRate;
                }
            });

            vatTotal = subtotal - (subtotal / 1.12);

            total = subtotal;

            const saleSubtotalCell = encodeTableBody.querySelector('.sale-subtotal.amount');
            if (saleSubtotalCell) {
                saleSubtotalCell.textContent = "₱ " + subtotal.toFixed(2);
            }

            const saleDiscountCell = encodeTableBody.querySelector('.sale-discount.amount');
            if (saleDiscountCell) {
                saleDiscountCell.textContent = "₱ " + discountTotal.toFixed(2);
            }

            const saleTaxCell = encodeTableBody.querySelector('.sale-tax.amount');
            if (saleTaxCell) {
                saleTaxCell.textContent = "₱ " + vatTotal.toFixed(2);
            }

            const saleTotalCell = encodeTableBody.querySelector('.sale-total.amount');
            if (saleTotalCell) {
                const totalTextNode = saleTotalCell.firstChild;
                if (totalTextNode && totalTextNode.nodeType === Node.TEXT_NODE) {
                    totalTextNode.textContent = "₱ " + total.toFixed(2);
                } else {
                    saleTotalCell.insertBefore(document.createTextNode("₱ " + total.toFixed(2)), saleTotalCell.firstChild);
                }

                const saleTotalInput = saleTotalCell.querySelector('input[type="hidden"][name="sale-total"]');
                if (saleTotalInput) {
                    saleTotalInput.value = total.toFixed(2);
                }
            }
        }

        function addItemToEncodeTable(itemName, itemPrice, itemId) {
            const existingRow = Array.from(encodeTableBody.querySelectorAll('tr.data')).find(row => {
                const nameCell = row.querySelector('.name');
                return nameCell && nameCell.textContent.trim() === itemName.trim();
            });

            if (existingRow) {
                const quantityCell = existingRow.querySelector('.quantity');
                let quantity = parseInt(quantityCell.textContent, 10) || 0;
                quantity += 1;

                const quantityTextNode = quantityCell.firstChild;
                if (quantityTextNode && quantityTextNode.nodeType === Node.TEXT_NODE) {
                    quantityTextNode.textContent = quantity;
                } else {
                    quantityCell.insertBefore(document.createTextNode(quantity), quantityCell.firstChild);
                }

                const quantityInput = quantityCell.querySelector('input[name^="items"][name$="[quantity]"]');
                quantityInput.value = quantity;

                updateRowAmount(existingRow);
                updateTotalAmount();

                existingRow.focus();
                lastFocusedRow = existingRow;

                return existingRow;
            } else {
                const newRow = document.createElement('tr');
                newRow.classList.add('data');

                const rowCount = Array.from(encodeTableBody.querySelectorAll('tr.data')).length;

                newRow.innerHTML = `
                    <td class="quantity">
                        1 <input type="hidden" name="items[${rowCount}][quantity]" value="1" />
                    </td>
                    <td class="name">
                        ${itemName} <input type="hidden" name="items[${rowCount}][name]" value="${itemName}" />
                    </td>
                    <td class="price">
                        ${parseFloat(itemPrice).toFixed(2)} <input type="hidden" name="items[${rowCount}][price]" value="${parseFloat(itemPrice).toFixed(2)}" />
                    </td>
                    <td class="discount">
                        <div class="flex center">
                            <div class="checkbox-wrapper-2">
                                <input type="checkbox" name="items[${rowCount}][discount]" class="sc-gJwTLC ikxBAC" />
                            </div>
                        </div>
                    </td>
                    <td class="amount">
                        ${parseFloat(itemPrice).toFixed(2)} <input type="hidden" name="items[${rowCount}][amount]" value="${parseFloat(itemPrice).toFixed(2)}" />
                    </td>
                `;

                const allRows = Array.from(encodeTableBody.children);
                const targetIndex = allRows.length - 4;

                encodeTableBody.insertBefore(newRow, allRows[targetIndex]);

                updateRowAmount(newRow);
                updateTotalAmount();

                newRow.setAttribute("tabindex", "0");
                newRow.addEventListener("keydown", handleRowKeyEvents);
                newRow.addEventListener("focus", () => {
                    lastFocusedRow = newRow;
                });

                const discountCheckbox = newRow.querySelector('.discount input[type="checkbox"]');
                discountCheckbox.addEventListener("mousedown", function () {
                    discountCheckbox.addEventListener("change", function () {
                        updateRowAmount(newRow);
                        updateTotalAmount();

                        lastFocusedRow.focus();
                    }, { once: true });
                });

                return newRow;
            }
        }

        qtyInputField.addEventListener("focusout", function handleFocusOut() {
            setTimeout(() => {
                if (document.activeElement !== qtyInputField) {
                    qtyInputField.focus();
                }
            }, 0);
        });

        qtyInputField.addEventListener("input", function () {
            qtyInputField.value = qtyInputField.value.replace(/\D/g, '').slice(0, 3);

            if (qtyInputField.value.startsWith('0')) {
                qtyInputField.value = qtyInputField.value.slice(1);
            }
        });

        function handleRowKeyEvents(event) {
            const row = event.currentTarget;
            const key = event.key;

            if (key === 'ArrowDown' || key === 'ArrowUp') {
                event.preventDefault();
                const rows = encodeTableBody.querySelectorAll('tr.data');
                const index = Array.from(rows).indexOf(row);

                if (key === 'ArrowDown' && index < rows.length - 1) {
                    rows[index + 1].focus();
                }
                if (key === 'ArrowUp' && index > 0) {
                    rows[index - 1].focus();
                }
            }

            if (key.toLowerCase() === 'd') {
                const discountCheckbox = row.querySelector('.discount input[type="checkbox"]');
                
                discountCheckbox.checked = !discountCheckbox.checked;
                updateRowAmount(row);
                updateTotalAmount();
                
                event.preventDefault();
            }

            if (key.toLowerCase() === 'q') {
                qtyInput.style.visibility = "visible";
                bodyDiv.classList.add("blur");

                qtyInputField.focus();

                qtyInputField.addEventListener("keydown", function handleQtyInput(event) {
                    if (event.key === "Enter") {
                        const enteredQuantity = parseInt(qtyInputField.value, 10);

                        const itemName = row.querySelector('.name').textContent.trim();

                        const selectRow = Array.from(document.querySelectorAll('.select-table tbody tr'))
                            .find(selectRow => selectRow.querySelector('.select-description')?.textContent.trim() === itemName);

                        const maxAvailableQty = selectRow 
                            ? parseInt(selectRow.querySelector('.select-qty').textContent.trim(), 10) 
                            : 0;

                        if (!isNaN(enteredQuantity) && enteredQuantity > 0) {
                            const quantityCell = row.querySelector('.quantity');
                            const quantityTextNode = quantityCell.firstChild;

                            if (enteredQuantity > maxAvailableQty) {
                                const limitedQuantity = maxAvailableQty;

                                if (quantityTextNode && quantityTextNode.nodeType === Node.TEXT_NODE) {
                                    quantityTextNode.textContent = limitedQuantity;
                                } else {
                                    quantityCell.textContent = limitedQuantity;
                                }

                                const quantityInput = quantityCell.querySelector('input[type="hidden"]');
                                quantityInput.value = limitedQuantity;

                                error.hidden = false;
                                error.textContent = `Maximum available quantity is ${maxAvailableQty}`;
                                error.style.opacity = 1;
                                setTimeout(() => {
                                    error.style.opacity = 0;
                                }, 5000);
                            } else {
                                if (quantityTextNode && quantityTextNode.nodeType === Node.TEXT_NODE) {
                                    quantityTextNode.textContent = enteredQuantity;
                                } else {
                                    quantityCell.textContent = enteredQuantity;
                                }

                                const quantityInput = quantityCell.querySelector('input[type="hidden"]');
                                quantityInput.value = enteredQuantity;
                            }

                            updateRowAmount(row);
                            updateTotalAmount();
                        }

                        qtyInput.style.visibility = "hidden";
                        bodyDiv.classList.remove("blur");
                        qtyInputField.removeEventListener("keydown", handleQtyInput);
                        qtyInputField.value = ''; 

                        event.preventDefault();
                        event.stopPropagation();
                    }
                });
            }

            if (key === 'F2') {
                const previousRow = row.previousElementSibling;
                const nextRow = row.nextElementSibling;

                row.remove();
                updateTotalAmount();

                if (previousRow) {
                    previousRow.focus();
                } else if (nextRow) {
                    nextRow.focus();
                }

                event.preventDefault();
            }
        }

        document.addEventListener("keydown", function(event) {
            if (event.key === "F5") {
                event.preventDefault();
                event.stopPropagation();
                const saveSaleButton = document.querySelector("#save-sale-button");
                saveSaleButton.click();
            }
        });

        document.addEventListener("keydown", function(event) {
            if (event.key === "F9") {
                event.preventDefault(); 
                location.reload(); 
            }
        });

        document.addEventListener("keydown", function(event) {
            if (event.key === "F10") {
                event.preventDefault(); 
                window.location.href = "/home"; 
            }
        });

        error.addEventListener("click", (event) => {
            error.hidden = true;
        });
        
        document.addEventListener("keydown", function(event) {
            if (event.key === 'F4' && itemSelect.style.visibility === "hidden") { 
                bodyDiv.classList.add("blur");
                discountInput.style.visibility = "visible";
                discountInputField.focus();

                discountInputField.addEventListener("keydown", function handleDiscountEnter(event) {
                    if (event.key === "Enter") {
                        remarksInputField.focus();

                        remarksInputField.addEventListener("keydown", function handleRemarksEnter(event) {
                            if (event.key === "Enter") {
                                const discountDisplay = document.querySelector('.discount-display');
                                const discountValue = discountInputField.value.trim() || "20";

                                discountDisplay.textContent = `${discountValue}%`;
                                document.querySelector('input[name="discount"]').value = `${discountValue}`;

                                const remarksHiddenField = document.querySelector('input[name="remarks"]');
                                const remarksValue = remarksInputField.value.trim();
                                remarksHiddenField.value = remarksValue;

                                bodyDiv.classList.remove("blur");
                                discountInput.style.visibility = "hidden";

                                discountInputField.removeEventListener("keydown", handleDiscountEnter);
                                remarksInputField.removeEventListener("keydown", handleRemarksEnter);

                                event.stopPropagation();
                                event.preventDefault();
                            }
                        });

                        event.stopPropagation();
                        event.preventDefault();
                    }
                });

                event.preventDefault(); 
            }
        });

        discountInputField.addEventListener("input", function () {
            discountInputField.value = discountInputField.value.replace(/\D/g, '').slice(0, 2);

            if (discountInputField.value.startsWith('0')) {
                discountInputField.value = discountInputField.value.slice(1);
            }

            const rows = encodeTableBody.querySelectorAll('tr.data');
            rows.forEach(row => updateRowAmount(row));
            updateTotalAmount();
        });

        pluRows.forEach((row, index) => {
            row.setAttribute("tabindex", "0");
            row.addEventListener("focus", function () {
                const priceCell = row.querySelector(".select-price");
                if (priceCell) priceDisplay.textContent = "₱ " + priceCell.textContent;
                lastFocusedRow = row;
            });
            row.addEventListener("focusout", (event) => {
                if (!event.relatedTarget || !event.relatedTarget.closest('.select-table tbody tr')) {
                    if (lastFocusedRow) {
                        lastFocusedRow.focus();
                    }
                }
            });
            row.addEventListener("keydown", function (event) {
                const key = event.key;
                if (key === "ArrowDown" && index < pluRows.length - 1) {
                    pluRows[index + 1].focus();
                    event.preventDefault();
                } else if (key === "ArrowUp" && index > 0) {
                    pluRows[index - 1].focus();
                    event.preventDefault();
                }
                if (key === "Enter") { 
                    const itemName = row.querySelector(".select-description").textContent;
                    const itemPrice = row.querySelector(".select-price").textContent;
                    const itemId = row.querySelector(".select-code").textContent;
                    const newRow = addItemToEncodeTable(itemName, itemPrice, itemId);

                    newRow.focus();
                    lastFocusedRow = newRow;

                    itemSelect.style.visibility = "hidden";
                    bodyDiv.classList.remove("blur");

                    event.preventDefault();
                    event.stopPropagation();
                }
                if (key.length === 1) {
                    searchBuffer += key.toLowerCase();
                    if (searchTimeout) clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(() => {
                        searchBuffer = "";
                    }, 500);

                    function removeSpecialCharacters(str) {
                        return str.replace(/[^a-zA-Z0-9]/g, "");
                    }

                    let found = false;

                    for (let i = 0; i < pluRows.length; i++) {
                        const descriptionCell = pluRows[i].querySelector(".select-description");
                        if (descriptionCell) {
                            const cleanDescription = removeSpecialCharacters(descriptionCell.textContent.toLowerCase());
                            const cleanSearchBuffer = removeSpecialCharacters(searchBuffer);

                            if (cleanDescription.startsWith(cleanSearchBuffer)) {
                                pluRows[i].focus();
                                found = true;
                                break;
                            }
                        }
                    }

                    if (!found) {
                        for (let i = 0; i < pluRows.length; i++) {
                            const descriptionCell = pluRows[i].querySelector(".select-description");
                            if (descriptionCell) {
                                const cleanDescription = removeSpecialCharacters(descriptionCell.textContent.toLowerCase());
                                const cleanSearchBuffer = removeSpecialCharacters(searchBuffer);

                                if (cleanDescription.includes(cleanSearchBuffer)) {
                                    pluRows[i].focus();
                                    break;
                                }
                            }
                        }
                    }
                }

            });
        });

        document.addEventListener("keydown", function(event) {
            const activeElement = document.activeElement;
            const isQtyInputFocused = activeElement === qtyInputField;
            const isDiscountInputFocused = activeElement === discountInputField;
            const isRemarksInputFocused = activeElement === remarksInputField;

            if (event.key === "Enter") {
                itemSelect.style.visibility = "visible";
                bodyDiv.classList.add("blur");
                const firstPluRow = document.querySelector(".select-table tbody tr");
                if (firstPluRow) firstPluRow.focus();
            } else if (event.key === "Backspace" && !isQtyInputFocused && !isDiscountInputFocused && !isRemarksInputFocused) {
                itemSelect.style.visibility = "hidden";
                bodyDiv.classList.remove("blur");
            }
        });

        document.addEventListener("focusout", function () {
            setTimeout(() => {
                if (!document.activeElement || document.activeElement === document.body) {
                    if (lastFocusedRow) lastFocusedRow.focus();
                }
            }, 0);
        });

        document.querySelectorAll('.select-table tbody tr').forEach(row => {
            row.addEventListener('focus', (event) => {
                event.target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center',
                    inline: 'nearest'
                });
            });
        });
    });
</script>

</html>